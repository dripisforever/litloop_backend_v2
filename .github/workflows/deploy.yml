name: CD
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m venv env
    - name: Deploy to EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
        # Add all your secrets here
        DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
        SPOTIPY_CLIENT_ID: ${{ secrets.SPOTIPY_CLIENT_ID }}
        SPOTIPY_CLIENT_SECRET: ${{ secrets.SPOTIPY_CLIENT_SECRET }}

        

        AWS_ACCESS_KEY_QALYBAY: ${{ secrets.AWS_ACCESS_KEY_QALYBAY }}
        AWS_SECRET_KEY_QALYBAY: ${{ secrets.AWS_SECRET_KEY_QALYBAY }}
        AWS_STORAGE_BUCKET_NAME_QALYBAY: ${{ secrets.AWS_STORAGE_BUCKET_NAME_QALYBAY }}

        GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
        GOOGLE_SECRET_KEY: ${{ secrets.GOOGLE_SECRET_KEY }}
        GOOGLE_GEMINI_API_KEY:  ${{ secrets.GOOGLE_GEMINI_API_KEY }}

        DB_ENGINE: ${{ secrets.DB_ENGINE }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_HOST }}
        # Add more secrets as needed...
      run: |
        echo "$SSH_PRIVATE_KEY" > key.pem
        chmod 600 key.pem

        # Create environment file locally
        cat > .env << EOF
        DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
        SPOTIPY_CLIENT_ID=${SPOTIPY_CLIENT_ID}
        SPOTIPY_CLIENT_SECRET=${SPOTIPY_CLIENT_SECRET}


        AWS_ACCESS_KEY_QALYBAY=${AWS_ACCESS_KEY_QALYBAY}
        AWS_SECRET_KEY_QALYBAY=${AWS_SECRET_KEY_QALYBAY}
        AWS_STORAGE_BUCKET_NAME_QALYBAY=${AWS_STORAGE_BUCKET_NAME_QALYBAY}

        GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
        GOOGLE_SECRET_KEY=${GOOGLE_SECRET_KEY
        GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}

        DB_ENGINE=${DB_ENGINE}
        DB_NAME=${DB_NAME}
        DB_USER=${DB_USER}
        DB_PASSWORD=${DB_PASSWORD}
        DB_HOST=${DB_HOST}
        DB_PORT=${DB_HOST}

        EOF

        # Copy environment file to server
        scp -i key.pem .env ubuntu@$EC2_PUBLIC_IP:/home/ubuntu/litloop_backend_v2/.env

        # Deploy to server
        ssh -i key.pem ubuntu@$EC2_PUBLIC_IP -o StrictHostKeyChecking=no << 'EOF'
          # Update and install dependencies
          sudo apt update
          sudo apt install -y python3 python3-venv python3-pip nginx

          # Set proper permissions for env file
          chmod 600 /home/ubuntu/litloop_backend_v2/.env
          chown ubuntu:ubuntu /home/ubuntu/litloop_backend_v2/.env

          # Pull the latest code
          cd /home/ubuntu/litloop_backend_v2
          git pull origin main

          # Create and activate virtual environment
          if [ ! -d "env" ]; then
            python3 -m venv env
          fi
          source env/bin/activate

          # Load environment variables
          source .env

          # Install requirements
          pip install -r requirements/base.txt

          # Django migration
          python3 manage.py migrate

          # Set up Gunicorn
          sudo cp /home/ubuntu/litloop_backend_v2/deploy/gunicorn/gunicorn.service /etc/systemd/system/gunicorn.service
          sudo systemctl daemon-reload
          sudo systemctl enable gunicorn
          sudo systemctl restart gunicorn

          # Set up Nginx
          sudo cp /home/ubuntu/litloop_backend_v2/deploy/nginx/django.conf /etc/nginx/sites-available/litloop.conf
          sudo ln -sf /etc/nginx/sites-available/litloop.conf /etc/nginx/sites-enabled
          sudo nginx -t && sudo systemctl restart nginx
        EOF

        # Clean up local env file
        rm .env
