# Generated by Django 4.2.4 on 2023-11-14 17:05

from django.db import migrations, models
import django.db.models.deletion
import posts.helpers


class Migration(migrations.Migration):

    dependencies = [
        ('photos', '0003_photoalbum_photoalbumitem_photoalbum_photo_and_more'),
        ('playlists', '0001_initial'),
        ('tracks', '0005_trackview_trackplay_tracklike_trackimpression_and_more'),
        ('videos', '0002_videoplaylist_video_sprites_videoplaylistitem_and_more'),
        ('posts', '0002_postview_postlike_postimpression_postdislike_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='EncodeProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=90)),
                ('extension', models.CharField(choices=[('mp4', 'mp4'), ('webm', 'webm'), ('gif', 'gif')], max_length=10)),
                ('resolution', models.IntegerField(blank=True, choices=[(2160, '2160'), (1440, '1440'), (1080, '1080'), (720, '720'), (480, '480'), (360, '360'), (240, '240')], null=True)),
                ('codec', models.CharField(blank=True, choices=[('h265', 'h265'), ('h264', 'h264'), ('vp9', 'vp9')], max_length=10, null=True)),
                ('description', models.TextField(blank=True, help_text='description')),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['resolution'],
            },
        ),
        migrations.AddField(
            model_name='post',
            name='description',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name='post',
            name='title',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.CreateModel(
            name='VideoEncoding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_date', models.DateTimeField(auto_now_add=True)),
                ('commands', models.TextField(blank=True, help_text='commands run')),
                ('chunk', models.BooleanField(db_index=True, default=False, help_text='is chunk?')),
                ('chunk_file_path', models.CharField(blank=True, max_length=400)),
                ('chunks_info', models.TextField(blank=True)),
                ('logs', models.TextField(blank=True)),
                ('md5sum', models.CharField(blank=True, max_length=50, null=True)),
                ('encoding_file', models.FileField(blank=True, max_length=500, upload_to=posts.helpers.encoding_media_file_path, verbose_name='encoding file')),
                ('progress', models.PositiveSmallIntegerField(default=0)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('retries', models.IntegerField(default=0)),
                ('size', models.CharField(blank=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('fail', 'Fail'), ('success', 'Success')], default='pending', max_length=20)),
                ('temp_file', models.CharField(blank=True, max_length=400)),
                ('task_id', models.CharField(blank=True, max_length=100)),
                ('total_run_time', models.IntegerField(default=0)),
                ('worker', models.CharField(blank=True, max_length=100)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.encodeprofile')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='encodings', to='videos.video')),
            ],
        ),
        migrations.CreateModel(
            name='PostVideo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.post')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videos.video')),
            ],
        ),
        migrations.CreateModel(
            name='PostTrack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.post')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tracks.track')),
            ],
        ),
        migrations.CreateModel(
            name='PostPlaylist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlists.playlist')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.post')),
            ],
        ),
        migrations.CreateModel(
            name='PostPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('photo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='photos.photo')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='posts.post')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='photos',
            field=models.ManyToManyField(through='posts.PostPhoto', to='photos.photo'),
        ),
        migrations.AddField(
            model_name='post',
            name='playlists',
            field=models.ManyToManyField(through='posts.PostPlaylist', to='playlists.playlist'),
        ),
        migrations.AddField(
            model_name='post',
            name='tracks',
            field=models.ManyToManyField(through='posts.PostTrack', to='tracks.track'),
        ),
        migrations.AddField(
            model_name='post',
            name='videos',
            field=models.ManyToManyField(through='posts.PostVideo', to='videos.video'),
        ),
    ]
